// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package user is a generated GoMock package.
package user

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserI is a mock of UserI interface.
type MockUserI struct {
	ctrl     *gomock.Controller
	recorder *MockUserIMockRecorder
}

// MockUserIMockRecorder is the mock recorder for MockUserI.
type MockUserIMockRecorder struct {
	mock *MockUserI
}

// NewMockUserI creates a new mock instance.
func NewMockUserI(ctrl *gomock.Controller) *MockUserI {
	mock := &MockUserI{ctrl: ctrl}
	mock.recorder = &MockUserIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserI) EXPECT() *MockUserIMockRecorder {
	return m.recorder
}

// DecodeUser mocks base method.
func (m *MockUserI) DecodeUser(arg0 []byte) ([]User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeUser", arg0)
	ret0, _ := ret[0].([]User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeUser indicates an expected call of DecodeUser.
func (mr *MockUserIMockRecorder) DecodeUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeUser", reflect.TypeOf((*MockUserI)(nil).DecodeUser), arg0)
}

// EncodeUser mocks base method.
func (m *MockUserI) EncodeUser(arg0 []User) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EncodeUser", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EncodeUser indicates an expected call of EncodeUser.
func (mr *MockUserIMockRecorder) EncodeUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EncodeUser", reflect.TypeOf((*MockUserI)(nil).EncodeUser), arg0)
}

// New mocks base method.
func (m *MockUserI) New(name string, age int, address string, rollno int, courses []string) (User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", name, age, address, rollno, courses)
	ret0, _ := ret[0].(User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockUserIMockRecorder) New(name, age, address, rollno, courses interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockUserI)(nil).New), name, age, address, rollno, courses)
}

// String mocks base method.
func (m *MockUserI) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockUserIMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockUserI)(nil).String))
}
